Argirokastritis Polidoros 2196

στην εργασια ξεκιναω 3 διεργασιες με τον εξης τροπο:
N=3
Η 0 διεργασια ξεκιναει με την εντολη: python peer3.py server 0 127.0.0.1:2196
Η 1 διεργασια ξεκιναει με την εντολη: python peer3.py server-client 1 2197 2196 ΔΗΛΑΔΗ ΩΣ server που ακουει στην 2197 και συνδεεται με την διεργασια 0 στην πορτα 2196
Η 2 διεργασια ξεκιναει με την εντολη: python peer3.py client-client 2 2197 2196 Δημαδη συνδεεται με την 0 και την 1 στην πορτα 2196 2197 ΑΝΤΙΣΤΟΙΧΑ.
Ο κωδικας δοκιμαστηκε και για 4 διεργασιες.
N=4
Η 0 διεργασια ξεκιναει με την εντολη: python peer3.py server 0 2196
Η 1 διεργασια ξεκιναει με την εντολη: python peer3.py server-client 1 2197 2196 ΔΗΛΑΔΗ ΩΣ server που ακουει στην 2197 και συνδεεται με την διεργασια 0 στην πορτα 2196
Η 2 διεργασια ξεκιναει με την εντολη: python peer3.py server-client 2 2198 2197 Δημαδη ΩΣ server που ακουει στην 2198 και συνδεεται στην 2 στην πορτα 2197.
Η 4 διεργασια ξεκιναει με την εντολη: python peer3.py client-client 3 2198 2196.
Δημιουργω ενα αρχειο (synchronization.txt) το οποιο ελεγχει ποτε η καθε διεργασια θα μπει στο factory ετσι ωστε να κανουν reactor  ταυτοχρονα οι διεργασιες 
Η global μεταβλητη data_spl  ειναι για οταν υπαρχει συμφωρηση και τα δεδομενα ανεβαινουν ενωμενα πρεπει να κραταμε σε ενα buffer και να τα βγαζουμε ενα ενα αφου σε καθε μηνυμα εχουμε βαλει ^^ για να μπορουμε να ξερουμε που ειναι το τελος του καθε μηνυματος. Ο αντιστοιχος κωδικας ειναι:
 if data_spl != ' ':
			data = data_spl + data
		if '^^' in data:
			data, data1 =data.split('^^', 1)
			data_spl = data1					
Εχω μια global μεταβλητη Ν που την αλλαζουμε αναλογα ποσες διεργασιες θελουμε να μπουν σε επικοινωνια(π.χ για τρεις διεργασιες Ν=3).
(Α)Για το αμοιβαιο αποκλεισμο των διεργασιων εχω δημιουργησει μια μεθοδο(mutual_exclusion()) μεσα στην κλαση peer στην οποια μπαινει καθε φορα μια διεργασια για να πειραξει τυχον κοινοχρηστα δεδομενα.Στην περιπτωση αυτη απλα περιμενουν για λιγο οι διεργασιες.

Η global μταβλητη checkN βοηθαει για να μπορουμε να ξεχωριζουμε τα αντικειμενα της καθε διεργασιας.π.χ για την διεργασια που ειναι τελευταια και αποτελειται απο 2 client πρεπει να ξερουμε τι θα κανει ο καθενας γι αυτο τους βαζουμε ενα self.id οπως βοηθαει ακομα στην διεργασια 0 οταν υπαρχει αμοιβαιος αποκλεισμος και στελνουμε την σκυταλλη να την στελνουμε μονο στην επομενη κατα αυξοντα αριθμο διεργασια και οχι με οποιες ειναι συνδεδεμενη γι αυτο εχουμε και εκει ενα self.id.

Οταν οι διεργασιες ξεκινανε την επικοινωνια, πρωτη στον αμοιβαιο αποκλεισμο θα μπει η διεργασια 0 οποτε εχουμε βαλει μια βοηθητικη global μεταβλητη την check0 που βοηθαει την διεργασια 0 να μπει πρωτη.
 
Στην πραγματικοτητα οταν φτιαχνουμε μια διεργασια π.χ την 1 αποτελειται απο 2 peer αντικειμενα:1 αντικειμενο ως server που επικοινωνει με την διεργασια 2 και 1 client που επικοινωνει με την διεργασια 0.
Ετσι για να μπορεσουμε να συγχρονησουμε τα 2 αυτα αντικειμενα βαζουμε την global μεταβλητη check ο server που επικοινωνει με την διεργασια 2 εχει μπει στην sendUpdate() και τρεχει συνεχως μεχρι οταν γινει check=1 που σημαινει οτι ηρθε μηνυμα απο την διεργασια 0 και την παρελαβε ο client της διεργσιας 1(<skitalli>*0) και ετσι μπορει να μπει ο server στον αμοιβαιο αποκλεισμο.
Ετσι καθε διεργασια αρχιζωντας απο την 0 μπαινει σε αμοιβαιο αποκλεισμο και στελνει στην επομενη σε αυξωντα αριθμο διεργασια την σκυταλλη και παει κυκλικα.

(B)Οταν υπαρχει καταρευση της διεργασιας που ειναι Coordinator (στην περιπτωση μας η διεργασια 0) η τελευταια διεργασια συνδεεται με την επομενη του coordinator οποτε η διεργασια 1 που το καταλαβαινει ξεκιναει την εκλογη αρχηγου μεσω του αλγοριθμου του εξαναγκασμου.Αυτα υλοποιουντι με την μεθοδο μεσα στην peer coordinator().
Ετσι εχουμε μια global μεταβλητη την check_coor την οποια την ελεγχουμε καθε φορα που μπαινουν οι διεργασιες στην μεθοδο sendApdate() και αλλαζει μολις γινεται η νεα συνδεση.ετσι η διεργασια 1 στελνει στις υπολοιπες διεργασιες και αφου ειναι μεγαλυτερες της στελνουν self.transport.write('<ok>*'+str(self.num_of_process)+'^^').Οταν π.χ η διεργασια 2 που ειναι τελευταια στειλει παλι σην 1 τοτε του στελνει ενα μηνυμα οτι ειναι ο καινουριος coordinator και ξεκιναει παλι ο αμοιβαιος αποκλεισμος ξεκινωντας απο την τελευταια διεργασια.
